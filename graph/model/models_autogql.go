// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

func (d *CatPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.Name != nil {
		res["name"] = *d.Name
	}

	if d.Age != nil {
		res["age"] = d.Age
	}

	if d.UserID != nil {
		res["user_id"] = *d.UserID
	}

	if d.Alive != nil {
		res["alive"] = d.Alive
	}
	return res
}

func (d *CatInput) MergeToType() Cat {

	tmpName := d.Name

	var tmpAge *int
	if d.Age != nil {
		tmpAge = d.Age
	}

	tmpUserID := d.UserID

	var tmpAlive *bool
	if d.Alive != nil {
		tmpAlive = d.Alive
	}
	return Cat{
		Name:   tmpName,
		Age:    tmpAge,
		UserID: tmpUserID,
		Alive:  tmpAlive,
	}
}

func (d *CompanyPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.ID != nil {
		res["id"] = *d.ID
	}

	if d.Name != nil {
		res["name"] = *d.Name
	}

	if d.MotherCompanyID != nil {
		res["mother_company_id"] = d.MotherCompanyID
	}
	if d.MotherCompany != nil {
		res["mother_company"] = d.MotherCompany.MergeToType()
	}
	return res
}

func (d *CompanyInput) MergeToType() Company {

	tmpID := d.ID

	tmpName := d.Name

	var tmpMotherCompanyID *int
	if d.MotherCompanyID != nil {
		tmpMotherCompanyID = d.MotherCompanyID
	}
	var tmpMotherCompany Company
	if d.MotherCompany != nil {
		tmpMotherCompany = d.MotherCompany.MergeToType()
	}
	return Company{
		ID:              tmpID,
		Name:            tmpName,
		MotherCompanyID: tmpMotherCompanyID,
		MotherCompany:   &tmpMotherCompany,
	}
}

func (d *CreditCardPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.ID != nil {
		res["id"] = *d.ID
	}

	if d.Number != nil {
		res["number"] = *d.Number
	}

	if d.UserID != nil {
		res["user_id"] = *d.UserID
	}
	return res
}

func (d *CreditCardInput) MergeToType() CreditCard {

	tmpID := d.ID

	tmpNumber := d.Number

	tmpUserID := d.UserID
	return CreditCard{
		ID:     tmpID,
		Number: tmpNumber,
		UserID: tmpUserID,
	}
}

func (d *TodoPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.ID != nil {
		res["id"] = *d.ID
	}

	if d.Title != nil {
		res["title"] = *d.Title
	}

	if d.Description != nil {
		res["description"] = *d.Description
	}

	if d.Done != nil {
		res["done"] = *d.Done
	}
	if d.Users != nil {
		tmpUsers := make([]map[string]interface{}, len(d.Users))
		for _, v := range d.Users {
			tmp := v.MergeToType()
			tmpUsers = append(tmpUsers, tmp)
		}
		res["users"] = tmpUsers
	}
	return res
}

func (d *TodoInput) MergeToType() Todo {

	tmpID := d.ID

	tmpTitle := d.Title

	tmpDescription := d.Description

	tmpDone := d.Done
	var tmpUsers []*User
	if d.Users != nil {
		tmpUsers = make([]*User, len(d.Users))
		for _, v := range d.Users {
			tmp := v.MergeToType()
			tmpUsers = append(tmpUsers, &tmp)
		}
	}
	return Todo{
		ID:          tmpID,
		Title:       tmpTitle,
		Description: tmpDescription,
		Done:        tmpDone,
		Users:       tmpUsers,
	}
}

func (d *UserPatch) MergeToType() map[string]interface{} {
	res := make(map[string]interface{})

	if d.ID != nil {
		res["id"] = *d.ID
	}

	if d.Name != nil {
		res["name"] = *d.Name
	}

	if d.CompanyID != nil {
		res["company_id"] = d.CompanyID
	}
	if d.Company != nil {
		res["company"] = d.Company.MergeToType()
	}
	if d.TodoList != nil {
		tmpTodoList := make([]map[string]interface{}, len(d.TodoList))
		for _, v := range d.TodoList {
			tmp := v.MergeToType()
			tmpTodoList = append(tmpTodoList, tmp)
		}
		res["todo_list"] = tmpTodoList
	}
	if d.Cat != nil {
		tmpCat := make([]map[string]interface{}, len(d.Cat))
		for _, v := range d.Cat {
			tmp := v.MergeToType()
			tmpCat = append(tmpCat, tmp)
		}
		res["cat"] = tmpCat
	}
	if d.CreditCards != nil {
		tmpCreditCards := make([]map[string]interface{}, len(d.CreditCards))
		for _, v := range d.CreditCards {
			tmp := v.MergeToType()
			tmpCreditCards = append(tmpCreditCards, tmp)
		}
		res["credit_cards"] = tmpCreditCards
	}
	return res
}

func (d *UserInput) MergeToType() User {

	tmpID := d.ID

	tmpName := d.Name

	var tmpCompanyID *int
	if d.CompanyID != nil {
		tmpCompanyID = d.CompanyID
	}
	var tmpCompany Company
	if d.Company != nil {
		tmpCompany = d.Company.MergeToType()
	}
	var tmpTodoList []*Todo
	if d.TodoList != nil {
		tmpTodoList = make([]*Todo, len(d.TodoList))
		for _, v := range d.TodoList {
			tmp := v.MergeToType()
			tmpTodoList = append(tmpTodoList, &tmp)
		}
	}
	var tmpCat []*Cat
	if d.Cat != nil {
		tmpCat = make([]*Cat, len(d.Cat))
		for _, v := range d.Cat {
			tmp := v.MergeToType()
			tmpCat = append(tmpCat, &tmp)
		}
	}
	var tmpCreditCards []*CreditCard
	if d.CreditCards != nil {
		tmpCreditCards = make([]*CreditCard, len(d.CreditCards))
		for _, v := range d.CreditCards {
			tmp := v.MergeToType()
			tmpCreditCards = append(tmpCreditCards, &tmp)
		}
	}
	return User{
		ID:          tmpID,
		Name:        tmpName,
		CompanyID:   tmpCompanyID,
		Company:     &tmpCompany,
		TodoList:    tmpTodoList,
		Cat:         tmpCat,
		CreditCards: tmpCreditCards,
	}
}
