// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package db

import (
	"context"

	"github.com/fasibio/autogql_example/graph/model"
	"gorm.io/gorm"
)

type AutoGqlHookM interface {
	model.CreditCard | model.Company | model.Todo | model.User | model.Cat
}
type AutoGqlHookF interface {
	model.CreditCardFiltersInput | model.CompanyFiltersInput | model.TodoFiltersInput | model.UserFiltersInput | model.CatFiltersInput
}

type AutoGqlHookQueryO interface {
	model.CompanyOrder | model.TodoOrder | model.UserOrder | model.CatOrder | model.CreditCardOrder
}

type AutoGqlHookI interface {
	model.TodoInput | model.UserInput | model.CatInput | model.CreditCardInput | model.CompanyInput
}

type AutoGqlHookU interface {
	model.UpdateTodoInput | model.UpdateUserInput | model.UpdateCatInput | model.UpdateCreditCardInput | model.UpdateCompanyInput
}

type AutoGqlHookUP interface {
	model.UpdateUserPayload | model.UpdateCatPayload | model.UpdateCreditCardPayload | model.UpdateCompanyPayload | model.UpdateTodoPayload
}

type AutoGqlHookDP interface {
	model.DeleteTodoPayload | model.DeleteUserPayload | model.DeleteCatPayload | model.DeleteCreditCardPayload | model.DeleteCompanyPayload
}

type AutoGqlHookAP interface {
	model.AddTodoPayload | model.AddUserPayload | model.AddCatPayload | model.AddCreditCardPayload | model.AddCompanyPayload
}

type AutoGqlDB struct {
	Db    *gorm.DB
	Hooks map[string]any
}

func NewAutoGqlDB(db *gorm.DB) AutoGqlDB {
	return AutoGqlDB{
		Db:    db,
		Hooks: make(map[string]any),
	}
}

func (db *AutoGqlDB) Init() {
	db.Db.AutoMigrate(&model.Todo{}, &model.User{}, &model.Cat{}, &model.CreditCard{}, &model.Company{})
}

func AddGetHook[T AutoGqlHookM](db *AutoGqlDB, name string, implementation AutoGqlHookGet[T]) {
	db.Hooks[name] = implementation
}

func AddQueryHook[M AutoGqlHookM, F AutoGqlHookF, O AutoGqlHookQueryO](db *AutoGqlDB, name string, implementation AutoGqlHookQuery[M, F, O]) {
	db.Hooks[name] = implementation
}

func AddAddHook[M AutoGqlHookM, I AutoGqlHookI, AP AutoGqlHookAP](db *AutoGqlDB, name string, implementation AutoGqlHookAdd[M, I, AP]) {
	db.Hooks[name] = implementation
}

func AddUpdateHook[M AutoGqlHookM, U AutoGqlHookU, UP AutoGqlHookUP](db *AutoGqlDB, name string, implementation AutoGqlHookUpdate[U, UP]) {
	db.Hooks[name] = implementation
}

func AddDeleteHook[M AutoGqlHookM, F AutoGqlHookF, DP AutoGqlHookDP](db *AutoGqlDB, name string, implementation AutoGqlHookDelete[M, F, DP]) {
	db.Hooks[name] = implementation
}

type AutoGqlHookGet[obj AutoGqlHookM] interface {
	Received(ctx context.Context, dbHelper *AutoGqlDB, id int) (*gorm.DB, error)
	BeforeCallDb(ctx context.Context, db *gorm.DB) (*gorm.DB, error)
	AfterCallDb(ctx context.Context, data *obj) (*obj, error)
	BeforeReturn(ctx context.Context, data *obj, db *gorm.DB) (*obj, error)
}

type AutoGqlHookQuery[obj AutoGqlHookM, filter AutoGqlHookF, order AutoGqlHookQueryO] interface {
	Received(ctx context.Context, dbHelper *AutoGqlDB, filter *filter, order *order, first, offset *int) (*gorm.DB, *filter, *order, *int, *int, error)
	BeforeCallDb(ctx context.Context, db *gorm.DB) (*gorm.DB, error)
	AfterCallDb(ctx context.Context, data []*obj) ([]*obj, error)
	BeforeReturn(ctx context.Context, data []*obj, db *gorm.DB) ([]*obj, error)
}

type AutoGqlHookAdd[obj AutoGqlHookM, input AutoGqlHookI, res AutoGqlHookAP] interface {
	Received(ctx context.Context, dbHelper *AutoGqlDB, input []*input) (*gorm.DB, []*input, error)
	BeforeCallDb(ctx context.Context, db *gorm.DB, data []obj) (*gorm.DB, []obj, error)
	BeforeReturn(ctx context.Context, db *gorm.DB, res *res) (*res, error)
}

type AutoGqlHookUpdate[input AutoGqlHookU, res AutoGqlHookUP] interface {
	Received(ctx context.Context, dbHelper *AutoGqlDB, input *input) (*gorm.DB, input, error)
	BeforeCallDb(ctx context.Context, db *gorm.DB, data map[string]interface{}) (*gorm.DB, map[string]interface{}, error)
	BeforeReturn(ctx context.Context, db *gorm.DB, res *res) (*res, error)
}

type AutoGqlHookDelete[obj AutoGqlHookM, input AutoGqlHookF, res AutoGqlHookDP] interface {
	Received(ctx context.Context, dbHelper *AutoGqlDB, input *input) (*gorm.DB, input, error)
	BeforeCallDb(ctx context.Context, db *gorm.DB) (*gorm.DB, error)
	BeforeReturn(ctx context.Context, db *gorm.DB, res *res) (*res, error)
}
